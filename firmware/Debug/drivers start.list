
drivers start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d4c  08000d54  00010d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d4c  08000d4c  00010d54  2**0
                  CONTENTS
  4 .ARM          00000000  08000d4c  08000d4c  00010d54  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d4c  08000d54  00010d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000d54  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000d54  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d54  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001976  00000000  00000000  00010d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d3  00000000  00000000  000126f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00012ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  000130e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f992  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ece  00000000  00000000  00022c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055ada  00000000  00000000  00024b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a5ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e0  00000000  00000000  0007a63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08000d34 	.word	0x08000d34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	08000d34 	.word	0x08000d34

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db0a      	blt.n	8000786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <__NVIC_SetPriority+0x4c>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	440b      	add	r3, r1
 8000780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000784:	e00a      	b.n	800079c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4908      	ldr	r1, [pc, #32]	; (80007ac <__NVIC_SetPriority+0x50>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	3b04      	subs	r3, #4
 8000794:	0112      	lsls	r2, r2, #4
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	440b      	add	r3, r1
 800079a:	761a      	strb	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <enable_PLL_sysclock_src_external_HSE_PLL_src>:
	while ((RCC->CFGR & (0b11 << RCC_CFGR_SWS_Pos)) != (RCC_CFGR_SW_HSE<<RCC_CFGR_SWS_Pos));

}

void enable_PLL_sysclock_src_external_HSE_PLL_src()
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	000 Zero wait state, if 0 < SYSCLK< 24 MHz
	001 One wait state, if 24 MHz < SYSCLK < 48 MHz
	010 Two wait states, if 48 MHz < SYSCLK < 72 MHz

	*/
	FLASH->ACR	|= FLASH_ACR_LATENCY_2;
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <enable_PLL_sysclock_src_external_HSE_PLL_src+0xac>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a28      	ldr	r2, [pc, #160]	; (800085c <enable_PLL_sysclock_src_external_HSE_PLL_src+0xac>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6013      	str	r3, [r2, #0]

	//apb1 prescaler.
	//we have the systemclock running at 72MHZ. the apb1 can only go at 36MHZ. need to divide it by 2.
	//if we do not have this line using the 72MHZ system clock causes problems.
	//the debugget crashes if we do not divide this by 2
	RCC->CFGR |= (0b100<<RCC_CFGR_PPRE1_Pos);
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4a26      	ldr	r2, [pc, #152]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ca:	6053      	str	r3, [r2, #4]

	//enable clokc source to HSE lines
	RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	6193      	str	r3, [r2, #24]

	// Enable HSE
	RCC->CR |= RCC_CR_HSEON_Msk;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e2:	6013      	str	r3, [r2, #0]

	// wait until HSE ready
	while ( (RCC->CR & RCC_CR_HSERDY_Msk) == 0 );
 80007e4:	bf00      	nop
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <enable_PLL_sysclock_src_external_HSE_PLL_src+0x36>

	//set PLL multiplyer
	//RCC->CFGR |= RCC_CFGR_PLLMULL9_Msk;
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 80007f8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80007fc:	6053      	str	r3, [r2, #4]
	//do not divide HSE clock when input to PLL
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	6053      	str	r3, [r2, #4]
	//set HSE pas PLL src
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6053      	str	r3, [r2, #4]

	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081c:	6013      	str	r3, [r2, #0]

	//wait until PLL ready
	while ( (RCC->CR & RCC_CR_PLLRDY_Msk) == 0 );
 800081e:	bf00      	nop
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <enable_PLL_sysclock_src_external_HSE_PLL_src+0x70>

	// Select PLL as system clock source
	RCC->CFGR &= ~(RCC_CFGR_SW_Msk);//c;ear the SW bits in the CFGR reg
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000832:	f023 0303 	bic.w	r3, r3, #3
 8000836:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=(RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos); // set PLL as sorce for system clock
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	6053      	str	r3, [r2, #4]

	//Wait till PLL is used as system clock source
	while ((RCC->CFGR & (0b11 << RCC_CFGR_SWS_Pos)) != (0b10<<RCC_CFGR_SWS_Pos));
 8000844:	bf00      	nop
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <enable_PLL_sysclock_src_external_HSE_PLL_src+0xb0>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 030c 	and.w	r3, r3, #12
 800084e:	2b08      	cmp	r3, #8
 8000850:	d1f9      	bne.n	8000846 <enable_PLL_sysclock_src_external_HSE_PLL_src+0x96>

}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40022000 	.word	0x40022000
 8000860:	40021000 	.word	0x40021000
 8000864:	00000000 	.word	0x00000000

08000868 <config_systic_for_ms>:
  ////enable systick timer
  //SysTick->CTRL |= (1ul<<0);
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
}
void config_systic_for_ms (uint32_t sysclock_freq_input)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  //disable systic IRQ and systic conter
  SysTick->CTRL =0;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <config_systic_for_ms+0x88>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
  systick_LOAD = (systicinterruptperiod * systick_counter_clock_freq) -1

  systicinterruptperiod = 1ms =.001s
  systick_counter_clock_freq = sysclock_freq_input
  */
  SysTick->LOAD = ((.001*sysclock_freq_input)-1);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff fed6 	bl	8000628 <__aeabi_ui2d>
 800087c:	a31a      	add	r3, pc, #104	; (adr r3, 80008e8 <config_systic_for_ms+0x80>)
 800087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000882:	f7ff fc65 	bl	8000150 <__aeabi_dmul>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	4610      	mov	r0, r2
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <config_systic_for_ms+0x8c>)
 8000894:	f7ff fd8a 	bl	80003ac <__aeabi_dsub>
 8000898:	4602      	mov	r2, r0
 800089a:	460b      	mov	r3, r1
 800089c:	4c14      	ldr	r4, [pc, #80]	; (80008f0 <config_systic_for_ms+0x88>)
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	f7ff ff3b 	bl	800071c <__aeabi_d2uiz>
 80008a6:	4603      	mov	r3, r0
 80008a8:	6063      	str	r3, [r4, #4]

  //set interrupt priority of systic
  NVIC_SetPriority (SysTick_IRQn, (1ul<<__NVIC_PRIO_BITS)-1);
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f7ff ff54 	bl	800075c <__NVIC_SetPriority>

  ////reset systic counter
  SysTick->VAL=0;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <config_systic_for_ms+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]

  //select processor clock
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <config_systic_for_ms+0x88>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <config_systic_for_ms+0x88>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6013      	str	r3, [r2, #0]

  //enable exception reqiest
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <config_systic_for_ms+0x88>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <config_systic_for_ms+0x88>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6013      	str	r3, [r2, #0]

  ////enable systick timer
  //SysTick->CTRL |= (1ul<<0);
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <config_systic_for_ms+0x88>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <config_systic_for_ms+0x88>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6013      	str	r3, [r2, #0]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008ec:	3f50624d 	.word	0x3f50624d
 80008f0:	e000e010 	.word	0xe000e010
 80008f4:	3ff00000 	.word	0x3ff00000

080008f8 <Delay>:

/*Delay is based on knowing the time of the systic interrupt period
    if we have the interrupt fireing at every 1ms, then to get a 1 second delay, we need to pass 1000 as nTime
*/
void Delay(uint32_t nTime)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  TimeDelay=nTime;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <Delay+0x24>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  while(TimeDelay !=0);
 8000906:	bf00      	nop
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <Delay+0x24>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1fb      	bne.n	8000908 <Delay+0x10>
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	2000001c 	.word	0x2000001c

08000920 <SysTick_Handler>:


//defieing the systeick interrupt handler here
void SysTick_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	if (TimeDelay>0)
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SysTick_Handler+0x20>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <SysTick_Handler+0x16>
	{
		TimeDelay--;//variable is global and volatile
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Handler+0x20>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <SysTick_Handler+0x20>)
 8000934:	6013      	str	r3, [r2, #0]
	}
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000001c 	.word	0x2000001c

08000944 <init_IO>:
	//value of 1 means that the pin is connected to gnd
	return (GPIOA->IDR & (1ul<<PA2_ODR_IDR_OFFSET));
}

void init_IO()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;//enalbe clock source
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <init_IO+0x34>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <init_IO+0x34>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//enalbe clock source
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <init_IO+0x34>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <init_IO+0x34>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//enalbe clock source
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <init_IO+0x34>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <init_IO+0x34>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6193      	str	r3, [r2, #24]
	//also I may have bricked a board. I cannot program it at the moment.
	//we need to disable the JTAG interface so pin PB3 will work.
	 /*RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
	AFIO->MAPR &= ~(AFIO_MAPR_SWJ_CFG_Msk);
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_2;*/
	set_cart_rom_pins_output();
 800096c:	f000 f806 	bl	800097c <set_cart_rom_pins_output>

	init_control_pins();
 8000970:	f000 f86a 	bl	8000a48 <init_control_pins>


}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000

0800097c <set_cart_rom_pins_output>:

	GPIOB->IDR = 0;

}
void set_cart_rom_pins_output()
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	//clear port A CRL bits for PA3 to PA7.
	GPIOA->CRL &= ~(CRL_A_IO_MASK);
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a2b      	ldr	r2, [pc, #172]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 8000986:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800098a:	6013      	str	r3, [r2, #0]
	//set port A CRL as push pull output and 50MHZ to pins PA0 and PA3 to PA7
	GPIOA->CRL |= (PORT_A_CRL_OUTPUT_CONFIG);
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <set_cart_rom_pins_output+0xbc>)
 8000994:	4313      	orrs	r3, r2
 8000996:	600b      	str	r3, [r1, #0]
	//clear port A CRH bits for PA8, PA11, PA12 and PA15
	GPIOA->CRH &= ~(CRH_A_IO_MASK);
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a25      	ldr	r2, [pc, #148]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 800099e:	f023 130f 	bic.w	r3, r3, #983055	; 0xf000f
 80009a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009a6:	6053      	str	r3, [r2, #4]
	//set port A CRH as push pull output and 50MHZ to pins PA11,PA12
	GPIOA->CRH |= (PORT_A_CRH_OUTPUT_CONFIG);
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 80009ae:	f043 1303 	orr.w	r3, r3, #196611	; 0x30003
 80009b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009b6:	6053      	str	r3, [r2, #4]

	//clear port B CRL bits for PB0, PB1, PB2 adn PB4 to PB7
	GPIOB->CRL &= ~(CRL_B_IO_MASK);
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80009c2:	6013      	str	r3, [r2, #0]
	//set port B CRL as push pull output and 50MHZ to pins PB0, PB1, PB2 and PB4 to PB7
	GPIOB->CRL |= (PORT_B_CRL_OUTPUT_CONFIG);
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	491c      	ldr	r1, [pc, #112]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <set_cart_rom_pins_output+0xc4>)
 80009cc:	4313      	orrs	r3, r2
 80009ce:	600b      	str	r3, [r1, #0]
	//clear port B CRH bits for PB8, PB9, PB10 to PB15
	GPIOB->CRH &= ~(CRH_B_IO_MASK);
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
	//set port B CRH as push pull output and 50MHZ to pins PB8, PB9, PB10 to PB15
	GPIOB->CRH |= (PORT_B_CRH_OUTPUT_CONFIG);
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 80009e0:	f043 3333 	orr.w	r3, r3, #858993459	; 0x33333333
 80009e4:	6053      	str	r3, [r2, #4]

	//clear PORTC CRH bits for PC13
	GPIOC->CRH &= ~(CRH_C_IO_MASK);
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 80009ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80009f0:	6053      	str	r3, [r2, #4]
	//seet CRH port C as push pull output and 50MHZ foor PC13
	GPIOC->CRH |= (PORT_C_CRH_OUTPUT_CONFIG);
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 80009f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80009fc:	6053      	str	r3, [r2, #4]

	//clear ODR port A pins
	//clear PA3 to PA7, clear PA8, clear PA11 and PA12, clear PA0
	GPIOA->ODR &= ~(PORT_A_ODR_OUTPUT_MASK);
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <set_cart_rom_pins_output+0xb8>)
 8000a04:	f423 53cf 	bic.w	r3, r3, #6624	; 0x19e0
 8000a08:	f023 0319 	bic.w	r3, r3, #25
 8000a0c:	60d3      	str	r3, [r2, #12]

	//clear ODR port B pins
	//c;ear PB0 and PB1, clear PB10 to PB15, clear PB2 adn PB4 to PB9
	GPIOB->ODR &= ~(PORT_B_ODR_OUTPUT_MASK);
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <set_cart_rom_pins_output+0xc0>)
 8000a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a18:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8000a1c:	60d3      	str	r3, [r2, #12]

	//clear ODR port C pins, PC13
	GPIOC->ODR &= ~(PORT_C_ODR_OUTPUT_MASK);
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <set_cart_rom_pins_output+0xc8>)
 8000a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a28:	60d3      	str	r3, [r2, #12]

}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40010800 	.word	0x40010800
 8000a38:	33333003 	.word	0x33333003
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	33330333 	.word	0x33330333
 8000a44:	40011000 	.word	0x40011000

08000a48 <init_control_pins>:

	return return_value;
}

void init_control_pins()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

 	//clear port A CRL bits for PA1 and PA2
 	GPIOA->CRL &= ~(CRL_A_CONTROL_PINS_IO_MASK);
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <init_control_pins+0x48>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <init_control_pins+0x48>)
 8000a52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a56:	6013      	str	r3, [r2, #0]
 	//set port A CRL as push pull output and 50MHZ to pins PA1 and PA2
 	GPIOA->CRL |= (PORT_A_CONTROL_PINS_CRL_OUTPUT_CONFIG);
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <init_control_pins+0x48>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <init_control_pins+0x48>)
 8000a5e:	f443 734c 	orr.w	r3, r3, #816	; 0x330
 8000a62:	6013      	str	r3, [r2, #0]

 	//clear port A CRL bits for PC14 adn PC15
 	GPIOC->CRH &= ~(CRH_C_CONTROL_PINS_IO_MASK);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <init_control_pins+0x4c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <init_control_pins+0x4c>)
 8000a6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a6e:	6053      	str	r3, [r2, #4]
 	//set port C CRL as push pull output and 50MHZ to pins PC14 and PC15
 	GPIOC->CRH |= (PORT_C_CONTROL_PINS_CRL_CRL_OUTPUT_CONFIG);
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <init_control_pins+0x4c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <init_control_pins+0x4c>)
 8000a76:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 8000a7a:	6053      	str	r3, [r2, #4]

 	CLK_LOW();
 8000a7c:	f000 f80c 	bl	8000a98 <CLK_LOW>
 	WR_HIGH();
 8000a80:	f000 f826 	bl	8000ad0 <WR_HIGH>
 	RD_HIGH();
 8000a84:	f000 f832 	bl	8000aec <RD_HIGH>
 	CS_HIGH();
 8000a88:	f000 f814 	bl	8000ab4 <CS_HIGH>

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010800 	.word	0x40010800
 8000a94:	40011000 	.word	0x40011000

08000a98 <CLK_LOW>:
{
	GPIOC->ODR |= GPIO_PC14_MASK;
}

void CLK_LOW()
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_PC14_MASK;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <CLK_LOW+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <CLK_LOW+0x18>)
 8000aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aa6:	60d3      	str	r3, [r2, #12]

}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <CS_HIGH>:

void CS_HIGH()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	GPIOC->ODR |= GPIO_PC15_MASK
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <CS_HIGH+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <CS_HIGH+0x18>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	60d3      	str	r3, [r2, #12]
;
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40011000 	.word	0x40011000

08000ad0 <WR_HIGH>:
	GPIOC->ODR &= ~GPIO_PC15_MASK
;
}

void WR_HIGH()
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PA1_MASK;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <WR_HIGH+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <WR_HIGH+0x18>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40010800 	.word	0x40010800

08000aec <RD_HIGH>:
{
	GPIOA->ODR &= ~GPIO_PA1_MASK;
}

void RD_HIGH()
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PA2_MASK;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <RD_HIGH+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <RD_HIGH+0x18>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40010800 	.word	0x40010800

08000b08 <generic_USART_config>:


//BAUD=clcok/9600
//16mhz/9600=1667
void generic_USART_config(USART_TypeDef * USARTx, uint32_t BAUD_SET)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    //disable USART
    USARTx->CR1 &= ~USART_CR1_UE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60da      	str	r2, [r3, #12]

    //maybe it needs to be done here?
    USART1->CR3 |= USART_CR3_DMAT;//DMA mode enabled for transmit
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <generic_USART_config+0x70>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <generic_USART_config+0x70>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6153      	str	r3, [r2, #20]

    //set data length to 8 bits
    //00 = 8bits, 01 = 9bits, 10 = 7 bits
    USARTx->CR1 &= ~USART_CR1_M;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60da      	str	r2, [r3, #12]

    //select 1 stop bit
    //00 = 1 stop bit, 01 .5 stop bits, 10 2 stop bits, 11 = 1.5 stop bits
    USARTx->CR2 &= ~USART_CR2_STOP;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	611a      	str	r2, [r3, #16]

    //set parity as no parity
    //0 = no parity, 1= parity
    USARTx->CR1 &= ~USART_CR1_PCE;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60da      	str	r2, [r3, #12]
    //oversampling by 16
    //0= oversampling by 16, 1= oversampling by 8
    //USARTx->CR1 &= ~USART_CR1_OVER8;

    //set baud rate
    USARTx->BRR = BAUD_SET;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	609a      	str	r2, [r3, #8]

    //enable send and recieve
    USARTx->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	f043 020c 	orr.w	r2, r3, #12
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60da      	str	r2, [r3, #12]

    //enable usart
    USARTx->CR1 |= USART_CR1_UE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40013800 	.word	0x40013800

08000b7c <config_UART1_blocking_115200baud>:
    //config uart
    //72MHZ/9600 = 7500.
    generic_USART_config(USART1, 7500);
}
void config_UART1_blocking_115200baud()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	//config PA9 as uartTX, set alternatice function to 0x10 to be push pull.
	//set PA10 to be input connected to open drain
    //config PA9 USRT1_TX (AF7), config PA10 USART_RX (AF7)
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;//enalbe clock source
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <config_UART1_blocking_115200baud+0x80>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <config_UART1_blocking_115200baud+0x80>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
    GPIO_PORT(USART1_TX_PORT)->CRH &= ~(3ul<<PA9_CNF_OFFSET); //clear bits in the CNF location fo PA9
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000b92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b96:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_TX_PORT)->CRH |= (CNF_ALT_FUNCTOIN_PUSH_PULL<<PA9_CNF_OFFSET);//select alt function
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba2:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_TX_PORT)->CRH &= ~(3ul<<PA9_MODE_OFFSET); //clear bits in the MODE location for PA9
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000baa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bae:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_TX_PORT)->CRH |= (MODE_SPEED_50MHZ<<PA9_MODE_OFFSET);//set speed to PA9
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000bba:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_RX_PORT)->CRH &= ~(3ul<<PA10_CNF_OFFSET);//clear CNF for PA10
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bc2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000bc6:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_RX_PORT)->CRH |= (CNF_INPUT_PULL_UP<<PA10_CNF_OFFSET);//set PA10 as input pull up
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd2:	6053      	str	r3, [r2, #4]
    GPIO_PORT(USART1_RX_PORT)->CRH &= ~(3ul<<PA10_MODE_OFFSET);//make sure PA10 MODE is set to zero
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <config_UART1_blocking_115200baud+0x84>)
 8000bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bde:	6053      	str	r3, [r2, #4]


    //config clocks for USART1
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <config_UART1_blocking_115200baud+0x80>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <config_UART1_blocking_115200baud+0x80>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6193      	str	r3, [r2, #24]

    //config uart
    //72MHZ/115200 = 7500.
    generic_USART_config(USART1, 625);
 8000bec:	f240 2171 	movw	r1, #625	; 0x271
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <config_UART1_blocking_115200baud+0x88>)
 8000bf2:	f7ff ff89 	bl	8000b08 <generic_USART_config>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40013800 	.word	0x40013800

08000c08 <UART_BYTE_send_blocking>:


void UART_BYTE_send_blocking(USART_TypeDef *USARTx, uint8_t input_byte)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
    while(!(USARTx->SR & USART_SR_TC));//wait for hardware to set TXE,transmission is enabled
 8000c14:	bf00      	nop
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f9      	beq.n	8000c16 <UART_BYTE_send_blocking+0xe>
    USARTx->DR = input_byte;
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	605a      	str	r2, [r3, #4]
    while(!(USARTx->SR & USART_SR_TC));//wait for transmission complete bit to be set, transimission has completed
 8000c28:	bf00      	nop
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f9      	beq.n	8000c2a <UART_BYTE_send_blocking+0x22>
    //USARTx->SR |= USART_ICR_TCCF;//set the transmission complete flah
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <USART1_IRQHandler>:
	DMA1_Channel4->CCR &= ~DMA_CCR_EN;
	DMA1_Channel4->CNDTR = 5;//set the number of elements to send

}
void USART1_IRQHandler()
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

    }
#endif
#if(UART_DMA_TX_RX_INTERRUPT_TEST)
#endif
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
#include "UART_TO_USB_COMM.h"
#include "CRC.h"
#include "configuration.h"

int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
#endif
#if(PROOF_OF_CONCEPT||PYTHON_TEST_ONE)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	uint16_t read_rom_word(uint32_t input);

	enable_PLL_sysclock_src_external_HSE_PLL_src();
 8000c56:	f7ff fdab 	bl	80007b0 <enable_PLL_sysclock_src_external_HSE_PLL_src>
	config_systic_for_ms(72000);//72000000 would result in 1ms interrutps on the systick. so lets change it to us by removing 3 zeroes
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <main+0x38>)
 8000c5c:	f7ff fe04 	bl	8000868 <config_systic_for_ms>
	init_IO();
 8000c60:	f7ff fe70 	bl	8000944 <init_IO>
	set_cart_rom_pins_output();
 8000c64:	f7ff fe8a 	bl	800097c <set_cart_rom_pins_output>
	config_UART1_blocking_115200baud();
 8000c68:	f7ff ff88 	bl	8000b7c <config_UART1_blocking_115200baud>


	uint16_t tempWord=0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	80fb      	strh	r3, [r7, #6]
	//uint32_t cartSize = 800000;
	uint32_t cartSize = 8192000;
 8000c70:	f44f 03fa 	mov.w	r3, #8192000	; 0x7d0000
 8000c74:	603b      	str	r3, [r7, #0]
		}
#endif
#if(PYTHON_TEST_ONE	)
		while(1)
		{
			UART_BYTE_send_blocking(USART1, 'A');
 8000c76:	2141      	movs	r1, #65	; 0x41
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <main+0x3c>)
 8000c7a:	f7ff ffc5 	bl	8000c08 <UART_BYTE_send_blocking>
			//while(1);
			Delay(1200000);
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <main+0x40>)
 8000c80:	f7ff fe3a 	bl	80008f8 <Delay>
			UART_BYTE_send_blocking(USART1, 'A');
 8000c84:	e7f7      	b.n	8000c76 <main+0x26>
 8000c86:	bf00      	nop
 8000c88:	00011940 	.word	0x00011940
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	00124f80 	.word	0x00124f80

08000c94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff fff8 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca6:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cbc:	4c09      	ldr	r4, [pc, #36]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f000 f80f 	bl	8000cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff ffbf 	bl	8000c50 <main>
  bx lr
 8000cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cdc:	08000d54 	.word	0x08000d54
  ldr r2, =_sbss
 8000ce0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ce4:	20000020 	.word	0x20000020

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>
	...

08000cec <__libc_init_array>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4d0c      	ldr	r5, [pc, #48]	; (8000d24 <__libc_init_array+0x38>)
 8000cf2:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__libc_init_array+0x3c>)
 8000cf4:	1b64      	subs	r4, r4, r5
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	42a6      	cmp	r6, r4
 8000cfa:	d109      	bne.n	8000d10 <__libc_init_array+0x24>
 8000cfc:	f000 f81a 	bl	8000d34 <_init>
 8000d00:	2600      	movs	r6, #0
 8000d02:	4d0a      	ldr	r5, [pc, #40]	; (8000d2c <__libc_init_array+0x40>)
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <__libc_init_array+0x44>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	42a6      	cmp	r6, r4
 8000d0c:	d105      	bne.n	8000d1a <__libc_init_array+0x2e>
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d14:	4798      	blx	r3
 8000d16:	3601      	adds	r6, #1
 8000d18:	e7ee      	b.n	8000cf8 <__libc_init_array+0xc>
 8000d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d1e:	4798      	blx	r3
 8000d20:	3601      	adds	r6, #1
 8000d22:	e7f2      	b.n	8000d0a <__libc_init_array+0x1e>
 8000d24:	08000d4c 	.word	0x08000d4c
 8000d28:	08000d4c 	.word	0x08000d4c
 8000d2c:	08000d4c 	.word	0x08000d4c
 8000d30:	08000d50 	.word	0x08000d50

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	bf00      	nop
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr
